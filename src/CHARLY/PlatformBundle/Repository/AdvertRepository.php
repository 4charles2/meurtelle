<?php

namespace CHARLY\PlatformBundle\Repository;

use Doctrine\ORM\Mapping;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     *
     *
     * @return array toutes les adverts en base de donnée
     */
    /**
     * Va récupérer toutes les entités advert en base de données avec
     * ces jointures puis retourne une pagination
     * @param $page
     * @param $nbPerPage
     *
     * @return Paginator
     */
    public function getAdverts($page, $nbPerPage)
    {
        $qb = $this->createQueryBuilder('a');
            //Jointure sur l'attribut image
        $this->addJoin($qb, [
            "a.image",
            "a.categories"]);
        //Ne fonctionne plus leve une erreur "INCOMPATIBLE AVEC DISTINCT
        //sql-mode = "" dans le fichier /etc/mysql/my.cnf
        //TRES DECONSEILLER CAR desactive le mode sans echec et ne leve plus certaines erreur
        //$qb->orderBy('a.date', 'DESC');
        $qb = $qb->getQuery();

        $qb
            //Définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page-1) * $nbPerPage)
            //Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage);
        //Je retourne l'objet Paginator correspondant à la requête construite
        //Mettre les use correspondant en début de fichier
        return new Paginator($qb, true);

    }

    /**
     * @param $id
     *
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAdvertAllInfos($id)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.id = :id')
            ->setParameter('id', $id);

            $this->addJoin($qb, [
                "a.image",
                "a.categories",
                "a.applications",
                "a.skills",
                "ask.skill"
            ]);

            return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     *  Ajoute les tables en jointure avec leftJoin
     *  et les selectionnes addSelect
     *
     * @param QueryBuilder $qb
     * @param              $names
     */
    public function addJoin(QueryBuilder $qb, $names){

        if(is_array($names))
            foreach ($names as $name)
                $this->addJoin($qb, $name);
        else {
            $alias = preg_replace('/\.(..).*/', '$1', $names);
            $qb->leftJoin($names, $alias)
               ->addSelect($alias);
        }
    }
    //Jointure pour telecharger les images en même temps que les annonces
    /**
     * retun l'entite avec toute les annonces en incluant également les images
     *
     * @return Entity Advert with IMAGE
     */

    public function getAdvertsWithImages()
    {
        //todo faire un test juste avec andWhere
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.image', 'img')
            ->addSelect('img');

            return $qb->getQuery()
            ->getResult()
            ;
    }
    //Jointure avec le queryBuilder
    public function getAdvertWithApplication()
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.application', 'app')
            ->addSelect('app')
            ;
        

        return $qb
            ->getQuery()
            ->getResult();
    }


    //Recupere toutes les annonces qui corresponde à une catégories

    /**
     * Return list advert tie in $categoryNames
     *
     * @param array $categoryNames
     *
     * @return array
     */

    public function getAdvertWithCategories(array $categoryNames)
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->innerJoin('a.categories', 'c')
            ->addSelect('c');

            $qb->where($qb->expr()->in('c.name', $categoryNames));

        return $qb->getQuery()->getResult();
    }

    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.author = :author')
            ->setParameter('author', 'marine')
            ;
        //J'ajoute ma méthode perso
        $this->whereCurrentyear($qb);

    }

    /**
     * Retourne les annonces de l'auteur de l'année en cours
     *
     * @param QueryBuilder $qb
     *
     * @throws \Exception
     */
    public function whereCurrentyear(QueryBuilder $qb, $author)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01'))
            ->setParameter('end', new \DateTime('Y').'-12-31')
            ;
    }

    /**
     * Recherche des annonces ecrit par $author avant $year date
     * Trier par ordre DESC decroissant
     *
     * @param $author
     * @param $year
     *
     * @return array
     */
    public function findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')
            ->setParameter('author', $author)
            ->andWhere('a.date < :date')
            ->setParameter('date', $year)
            ->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }
    //Exemple d'utilisation ses requete existe déjà dans la classe EntityRepository
    /*
    public function myFindAll()
    {
        // Méthode 1 : en passant par l'entityManager
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("a")
            ->from($this->_entityName, 'a');

        //Dans un repository, $this->_entityName est le namespace de l'entité gérée
        //Ici, il vaut donc CHARLYPlatformBundle\Entity\Advert

        //Méthode 2 : en passant par le raccourci (RECOMMANDÉ)
        $queryBuilder = $this->createQueryBuilder('a');

        //On ajoute pas de critère ou tri particulier, la construction de notre requete est finie

        //On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();

        //On récupère les résultats à partir de la Query
        $results = $query->getresult();

        //On retourne ces résultats
        return $results;


        //De façon raccourci cela nous dennerai

        return $this->createQueryBuilder('a')->getQuery()->getresult();
    }

    public function myfindOne($id)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.id = :id')
            ->setParameter('id', $id);

        return $qb->getQuery()->getResult();
    }
    */

    /*Requete DQl
    public function myFindAllDQL()
    {
        $query = $this->_em->createQuery('SELECT a FROM CHARLYPlatformBundle:Advert a');
        $results = $query->getResult();

        return $results;
    }
    */
}
